---

variables:
# Suitesparse, as installed with Debian, is thread-parallel using OpenMP.
# OpenMP silently assumes, it can spawn as many threads as there are cores.
# In a worst case scenario, this leads to a number of threads quadratic in
# the core count, if you also do parallel test execution with the maximum
# number of cores. We solve the issue by disallowing OpenMP to allocate more
# than one thread.
  OMP_NUM_THREADS: 1
  DUNECI_PARALLEL: 4

.dune_setup: &dune_setup |-
  . /duneci/bin/duneci-init-job
  duneci-install-module https://gitlab.dune-project.org/core/dune-common.git
  duneci-install-module https://gitlab.dune-project.org/core/dune-geometry.git
  duneci-install-module https://gitlab.dune-project.org/core/dune-localfunctions.git
  duneci-install-module https://gitlab.dune-project.org/staging/dune-uggrid.git
  duneci-install-module https://gitlab.dune-project.org/core/dune-grid.git
  duneci-install-module https://gitlab.dune-project.org/extensions/dune-alugrid.git
  duneci-install-module https://gitlab.dune-project.org/core/dune-istl.git
  duneci-install-module https://gitlab.dune-project.org/staging/dune-typetree.git
  duneci-install-module https://gitlab.dune-project.org/staging/dune-functions.git
  duneci-install-module https://gitlab.dune-project.org/extensions/dune-multidomaingrid.git

.common: &common
  script:
    - duneci-standard-test
    # test tutorials as well
    - export DUNE_CONTROL_PATH=$(pwd):/duneci/modules:$DUNE_CONTROL_PATH
    - duneci-install-module https://gitlab.dune-project.org/pdelab/dune-pdelab-tutorials.git
  tags:
    - "duneci"

debian:11--gcc:
  <<: *common
  image: registry.dune-project.org/docker/ci/debian:11
  before_script:
    - *dune_setup
    - echo "CMAKE_FLAGS+=' -DCOVERAGE_REPORT=ON' " >> /duneci/cmake-flags/overage.opts
  after_script:
    - gcovr $GCOVR_OPTS $CI_PROJECT_DIR/build-cmake
  variables:
    # Create a coverage report 
    #
    # Notes:
    # - Only works for gcc
    # - The gcov executable needs to match the version of the gcc toolchain
    GCOVR_OPTS:
      --gcov-executable gcov-10
      --root $CI_PROJECT_DIR
      --exclude $CI_PROJECT_DIR/dune/pdelab/test
      --exclude $CI_PROJECT_DIR/build-cmake
      --exclude-unreachable-branches
      --xml-pretty
      --print-summary
      --output $CI_PROJECT_DIR/coverage.xml
    DUNECI_TOOLCHAIN: gcc-10-20
  artifacts:
    reports:
      junit: junit/*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  # gcovr reports results (`--print-summary` option above). With this line we extract the
  # result (% of covered lines) to report them in gitlab
  coverage: /^\s*lines:\s*\d+.\d+\%/

debian:11--clang:
  <<: *common
  image: registry.dune-project.org/docker/ci/debian:11
  before_script:
    - *dune_setup
  variables:
    DUNECI_TOOLCHAIN: clang-11-20
  artifacts:
    reports:
      junit: junit/*.xml
